var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('angular2/core');
var control_value_accessor_1 = require('angular2/src/common/forms/directives/control_value_accessor');
var lang_1 = require('angular2/src/facade/lang');
var one_of_1 = require('../core/annotations/one-of');
/**
 * Monotonically increasing integer used to auto-generate unique ids for checkbox components.
 */
var nextId = 0;
/**
 * Provider Expression that allows md-checkbox to register as a ControlValueAccessor. This allows it
 * to support [(ngModel)] and ngControl.
 */
var MD_CHECKBOX_CONTROL_VALUE_ACCESSOR = lang_1.CONST_EXPR(new core_1.Provider(control_value_accessor_1.NG_VALUE_ACCESSOR, {
    useExisting: core_1.forwardRef(function () { return MdCheckbox; }),
    multi: true
}));
/**
 * Represents the different states that require custom transitions between them.
 */
var TransitionCheckState;
(function (TransitionCheckState) {
    /** The initial state of the component before any user interaction. */
    TransitionCheckState[TransitionCheckState["Init"] = 0] = "Init";
    /** The state representing the component when it's becoming checked. */
    TransitionCheckState[TransitionCheckState["Checked"] = 1] = "Checked";
    /** The state representing the component when it's becoming unchecked. */
    TransitionCheckState[TransitionCheckState["Unchecked"] = 2] = "Unchecked";
    /** The state representing the component when it's becoming indeterminate. */
    TransitionCheckState[TransitionCheckState["Indeterminate"] = 3] = "Indeterminate";
})(TransitionCheckState || (TransitionCheckState = {}));
/**
 * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,
 * and exposes a similar API. An MdCheckbox can be either checked, unchecked, indeterminate, or
 * disabled. Note that all additional accessibility attributes are taken care of by the component,
 * so there is no need to provide them yourself. However, if you want to omit a label and still
 * have the checkbox be accessible, you may supply an [aria-label] input.
 * See: https://www.google.com/design/spec/components/selection-controls.html
 */
var MdCheckbox = (function () {
    function MdCheckbox(_renderer, _elementRef) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        /**
         * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will
         * take precedence so this may be omitted.
         */
        this.ariaLabel = '';
        /** A unique id for the checkbox. If one is not supplied, it is auto-generated. */
        this.id = "md-checkbox-" + ++nextId;
        /** Whether or not the checkbox should come before or after the label. */
        this.align = 'start';
        /**
         * Whether the checkbox is disabled. When the checkbox is disabled it cannot be interacted with.
         * The correct ARIA attributes are applied to denote this to assistive technology.
         */
        this.disabled = false;
        /**
         * The tabindex attribute for the checkbox. Note that when the checkbox is disabled, the attribute
         * on the host element will be set to -1, regardless of the actual tabindex value.
         */
        this.tabindex = 0;
        /** Event emitted when the checkbox's `checked` value changes. */
        this.change = new core_1.EventEmitter();
        /** Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor. */
        this.onTouched = function () { };
        this._currentAnimationClass = '';
        this._currentCheckState = TransitionCheckState.Init;
        this._checked = false;
        this._indeterminate = false;
        this._changeSubscription = null;
    }
    Object.defineProperty(MdCheckbox.prototype, "checked", {
        /**
         * Whether the checkbox is checked. Note that setting `checked` will immediately set
         * `indeterminate` to false.
         */
        get: function () {
            return this._checked;
        },
        set: function (checked) {
            this._indeterminate = false;
            this._checked = checked;
            this._transitionCheckState(this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);
            this.change.emit(this._checked);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdCheckbox.prototype, "indeterminate", {
        /**
         * Whether the checkbox is indeterminate. This is also known as "mixed" mode and can be used to
         * represent a checkbox with three states, e.g. a checkbox that represents a nested list of
         * checkable items. Note that whenever `checked` is set, indeterminate is immediately set to
         * false. This differs from the web platform in that indeterminate state on native
         * checkboxes is only remove when the user manually checks the checkbox (rather than setting the
         * `checked` property programmatically). However, we feel that this behavior is more accommodating
         * to the way consumers would envision using this component.
         */
        get: function () {
            return this._indeterminate;
        },
        set: function (indeterminate) {
            this._indeterminate = indeterminate;
            if (this._indeterminate) {
                this._transitionCheckState(TransitionCheckState.Indeterminate);
            }
            else {
                this._transitionCheckState(this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdCheckbox.prototype, "labelId", {
        /** The id that is attached to the checkbox's label. */
        get: function () {
            return this.id + "-label";
        },
        enumerable: true,
        configurable: true
    });
    /** Returns the proper aria-checked attribute value based on the checkbox's state. */
    MdCheckbox.prototype.getAriaChecked = function () {
        if (this.indeterminate) {
            return 'mixed';
        }
        return this.checked ? 'true' : 'false';
    };
    /** Toggles the checked state of the checkbox. If the checkbox is disabled, this does nothing. */
    MdCheckbox.prototype.toggle = function () {
        this.checked = !this.checked;
    };
    /**
     * Event handler used for both (click) and (keyup.space) events. Delegates to toggle().
     */
    MdCheckbox.prototype.onInteractionEvent = function (event) {
        if (this.disabled) {
            event.stopPropagation();
            return;
        }
        this.toggle();
    };
    /** Implemented as part of ControlValueAccessor. */
    MdCheckbox.prototype.writeValue = function (value) {
        this.checked = !!value;
    };
    /** Implemented as part of ControlValueAccessor. */
    MdCheckbox.prototype.registerOnChange = function (fn) {
        if (this._changeSubscription) {
            this._changeSubscription.unsubscribe();
        }
        this._changeSubscription = this.change.subscribe(fn);
    };
    /** Implemented as part of ControlValueAccessor. */
    MdCheckbox.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    MdCheckbox.prototype._transitionCheckState = function (newState) {
        var oldState = this._currentCheckState;
        var renderer = this._renderer;
        var elementRef = this._elementRef;
        if (oldState === newState) {
            return;
        }
        if (this._currentAnimationClass.length > 0) {
            renderer.setElementClass(elementRef.nativeElement, this._currentAnimationClass, false);
        }
        this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);
        this._currentCheckState = newState;
        if (this._currentAnimationClass.length > 0) {
            renderer.setElementClass(elementRef.nativeElement, this._currentAnimationClass, true);
        }
    };
    MdCheckbox.prototype._getAnimationClassForCheckStateTransition = function (oldState, newState) {
        var animSuffix;
        switch (oldState) {
            case TransitionCheckState.Init:
                return '';
            case TransitionCheckState.Unchecked:
                animSuffix = newState === TransitionCheckState.Checked ?
                    'unchecked-checked' : 'unchecked-indeterminate';
                break;
            case TransitionCheckState.Checked:
                animSuffix = newState === TransitionCheckState.Unchecked ?
                    'checked-unchecked' : 'checked-indeterminate';
                break;
            case TransitionCheckState.Indeterminate:
                animSuffix = newState === TransitionCheckState.Checked ?
                    'indeterminate-checked' : 'indeterminate-unchecked';
        }
        return "md-checkbox-anim-" + animSuffix;
    };
    __decorate([
        core_1.Input('aria-label'), 
        __metadata('design:type', String)
    ], MdCheckbox.prototype, "ariaLabel", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], MdCheckbox.prototype, "id", void 0);
    __decorate([
        core_1.Input(),
        one_of_1.OneOf(['start', 'end']), 
        __metadata('design:type', String)
    ], MdCheckbox.prototype, "align", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], MdCheckbox.prototype, "disabled", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Number)
    ], MdCheckbox.prototype, "tabindex", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], MdCheckbox.prototype, "change", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], MdCheckbox.prototype, "checked", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], MdCheckbox.prototype, "indeterminate", null);
    MdCheckbox = __decorate([
        core_1.Component({
            selector: 'md-checkbox',
            template: `
              <div class="md-checkbox-layout">
                <div class="md-checkbox-inner-container">
                  <div class="md-checkbox-frame"></div>
                  <div class="md-checkbox-background">
                    <svg version="1.1"
                         class="md-checkbox-checkmark"
                         xmlns="http://www.w3.org/2000/svg"
                         viewBox="0 0 24 24"
                         xml:space="preserve">
                      <path class="md-checkbox-checkmark-path"
                            fill="none"
                            stroke="white"
                            d="M4.1,12.7 9,17.6 20.3,6.3"/>
                    </svg>
                    <!-- Element for rendering the indeterminate state checkbox. -->
                    <div class="md-checkbox-mixedmark"></div>
                  </div>
                </div>
                <label [id]="labelId">
                  <ng-content></ng-content>
                </label>
              </div>
            `,
            styles: [`
              /** The width/height of the checkbox element. */
              /** The width of the line used to draw the checkmark / mixedmark. */
              /** The width of the checkbox border shown when the checkbox is unchecked. */
              /** The color of the checkbox border. */
              /** The color of the checkbox's checkmark / mixedmark. */
              /** The color that is used as the checkbox background when it is checked. */
              /** The base duration used for the majority of transitions for the checkbox. */
              /** The amount of spacing between the checkbox and its label. */
              /**
               * Fades in the background of the checkbox when it goes from unchecked -> {checked,indeterminate}.
               */
              @-webkit-keyframes md-checkbox-fade-in-background {
                0% {
                  opacity: 0; }
                50% {
                  opacity: 1; } }
              @keyframes md-checkbox-fade-in-background {
                0% {
                  opacity: 0; }
                50% {
                  opacity: 1; } }

              /**
               * Fades out the background of the checkbox when it goes from {checked,indeterminate} -> unchecked.
               */
              @-webkit-keyframes md-checkbox-fade-out-background {
                0%, 50% {
                  opacity: 1; }
                100% {
                  opacity: 0; } }
              @keyframes md-checkbox-fade-out-background {
                0%, 50% {
                  opacity: 1; }
                100% {
                  opacity: 0; } }

              /**
               * "Draws" in the checkmark when the checkbox goes from unchecked -> checked.
               */
              @-webkit-keyframes md-checkbox-unchecked-checked-checkmark-path {
                0%, 50% {
                  stroke-dashoffset: 22.91026; }
                50% {
                  -webkit-animation-timing-function: cubic-bezier(0, 0, 0.2, 0.1);
                          animation-timing-function: cubic-bezier(0, 0, 0.2, 0.1); }
                100% {
                  stroke-dashoffset: 0; } }
              @keyframes md-checkbox-unchecked-checked-checkmark-path {
                0%, 50% {
                  stroke-dashoffset: 22.91026; }
                50% {
                  -webkit-animation-timing-function: cubic-bezier(0, 0, 0.2, 0.1);
                          animation-timing-function: cubic-bezier(0, 0, 0.2, 0.1); }
                100% {
                  stroke-dashoffset: 0; } }

              /**
               * Horizontally expands the mixedmark when the checkbox goes from unchecked -> indeterminate.
               */
              @-webkit-keyframes md-checkbox-unchecked-indeterminate-mixedmark {
                0%, 68.2% {
                  -webkit-transform: scaleX(0);
                          transform: scaleX(0); }
                68.2% {
                  -webkit-animation-timing-function: cubic-bezier(0, 0, 0, 1);
                          animation-timing-function: cubic-bezier(0, 0, 0, 1); }
                100% {
                  -webkit-transform: scaleX(1);
                          transform: scaleX(1); } }
              @keyframes md-checkbox-unchecked-indeterminate-mixedmark {
                0%, 68.2% {
                  -webkit-transform: scaleX(0);
                          transform: scaleX(0); }
                68.2% {
                  -webkit-animation-timing-function: cubic-bezier(0, 0, 0, 1);
                          animation-timing-function: cubic-bezier(0, 0, 0, 1); }
                100% {
                  -webkit-transform: scaleX(1);
                          transform: scaleX(1); } }

              /**
               * "Erases" the checkmark when the checkbox goes from checked -> unchecked.
               */
              @-webkit-keyframes md-checkbox-checked-unchecked-checkmark-path {
                from {
                  -webkit-animation-timing-function: cubic-bezier(0.4, 0, 1, 1);
                          animation-timing-function: cubic-bezier(0.4, 0, 1, 1);
                  stroke-dashoffset: 0; }
                to {
                  stroke-dashoffset: -22.91026; } }
              @keyframes md-checkbox-checked-unchecked-checkmark-path {
                from {
                  -webkit-animation-timing-function: cubic-bezier(0.4, 0, 1, 1);
                          animation-timing-function: cubic-bezier(0.4, 0, 1, 1);
                  stroke-dashoffset: 0; }
                to {
                  stroke-dashoffset: -22.91026; } }

              /**
               * Rotates and fades out the checkmark when the checkbox goes from checked -> indeterminate. This
               * animation helps provide the illusion of the checkmark "morphing" into the mixedmark.
               */
              @-webkit-keyframes md-checkbox-checked-indeterminate-checkmark {
                from {
                  -webkit-animation-timing-function: cubic-bezier(0, 0, 0.2, 0.1);
                          animation-timing-function: cubic-bezier(0, 0, 0.2, 0.1);
                  opacity: 1;
                  -webkit-transform: rotate(0deg);
                          transform: rotate(0deg); }
                to {
                  opacity: 0;
                  -webkit-transform: rotate(45deg);
                          transform: rotate(45deg); } }
              @keyframes md-checkbox-checked-indeterminate-checkmark {
                from {
                  -webkit-animation-timing-function: cubic-bezier(0, 0, 0.2, 0.1);
                          animation-timing-function: cubic-bezier(0, 0, 0.2, 0.1);
                  opacity: 1;
                  -webkit-transform: rotate(0deg);
                          transform: rotate(0deg); }
                to {
                  opacity: 0;
                  -webkit-transform: rotate(45deg);
                          transform: rotate(45deg); } }

              /**
               * Rotates and fades the checkmark back into position when the checkbox goes from indeterminate ->
               * checked. This animation helps provide the illusion that the mixedmark is "morphing" into the
               * checkmark.
               */
              @-webkit-keyframes md-checkbox-indeterminate-checked-checkmark {
                from {
                  -webkit-animation-timing-function: cubic-bezier(0.14, 0, 0, 1);
                          animation-timing-function: cubic-bezier(0.14, 0, 0, 1);
                  opacity: 0;
                  -webkit-transform: rotate(45deg);
                          transform: rotate(45deg); }
                to {
                  opacity: 1;
                  -webkit-transform: rotate(360deg);
                          transform: rotate(360deg); } }
              @keyframes md-checkbox-indeterminate-checked-checkmark {
                from {
                  -webkit-animation-timing-function: cubic-bezier(0.14, 0, 0, 1);
                          animation-timing-function: cubic-bezier(0.14, 0, 0, 1);
                  opacity: 0;
                  -webkit-transform: rotate(45deg);
                          transform: rotate(45deg); }
                to {
                  opacity: 1;
                  -webkit-transform: rotate(360deg);
                          transform: rotate(360deg); } }

              /**
               * Rotates and fades in the mixedmark when the checkbox goes from checked -> indeterminate. This
               * animation, similar to md-checkbox-checked-indeterminate-checkmark, helps provide an illusion
               * of "morphing" from checkmark -> mixedmark.
               */
              @-webkit-keyframes md-checkbox-checked-indeterminate-mixedmark {
                from {
                  -webkit-animation-timing-function: cubic-bezier(0, 0, 0.2, 0.1);
                          animation-timing-function: cubic-bezier(0, 0, 0.2, 0.1);
                  opacity: 0;
                  -webkit-transform: rotate(-45deg);
                          transform: rotate(-45deg); }
                to {
                  opacity: 1;
                  -webkit-transform: rotate(0deg);
                          transform: rotate(0deg); } }
              @keyframes md-checkbox-checked-indeterminate-mixedmark {
                from {
                  -webkit-animation-timing-function: cubic-bezier(0, 0, 0.2, 0.1);
                          animation-timing-function: cubic-bezier(0, 0, 0.2, 0.1);
                  opacity: 0;
                  -webkit-transform: rotate(-45deg);
                          transform: rotate(-45deg); }
                to {
                  opacity: 1;
                  -webkit-transform: rotate(0deg);
                          transform: rotate(0deg); } }

              /**
               * Rotates and fades out the mixedmark when the checkbox goes from indeterminate -> checked. This
               * animation, similar to md-checkbox-indeterminate-checked-checkmark, helps provide an illusion
               * of "morphing" from mixedmark -> checkmark.
               */
              @-webkit-keyframes md-checkbox-indeterminate-checked-mixedmark {
                from {
                  -webkit-animation-timing-function: cubic-bezier(0.14, 0, 0, 1);
                          animation-timing-function: cubic-bezier(0.14, 0, 0, 1);
                  opacity: 1;
                  -webkit-transform: rotate(0deg);
                          transform: rotate(0deg); }
                to {
                  opacity: 0;
                  -webkit-transform: rotate(315deg);
                          transform: rotate(315deg); } }
              @keyframes md-checkbox-indeterminate-checked-mixedmark {
                from {
                  -webkit-animation-timing-function: cubic-bezier(0.14, 0, 0, 1);
                          animation-timing-function: cubic-bezier(0.14, 0, 0, 1);
                  opacity: 1;
                  -webkit-transform: rotate(0deg);
                          transform: rotate(0deg); }
                to {
                  opacity: 0;
                  -webkit-transform: rotate(315deg);
                          transform: rotate(315deg); } }

              /**
               * Horizontally collapses and fades out the mixedmark when the checkbox goes from indeterminate ->
               * unchecked.
               */
              @-webkit-keyframes md-checkbox-indeterminate-unchecked-mixedmark {
                0% {
                  -webkit-animation-timing-function: linear;
                          animation-timing-function: linear;
                  opacity: 1;
                  -webkit-transform: scaleX(1);
                          transform: scaleX(1); }
                32.8%, 100% {
                  opacity: 0;
                  -webkit-transform: scaleX(0);
                          transform: scaleX(0); } }
              @keyframes md-checkbox-indeterminate-unchecked-mixedmark {
                0% {
                  -webkit-animation-timing-function: linear;
                          animation-timing-function: linear;
                  opacity: 1;
                  -webkit-transform: scaleX(1);
                          transform: scaleX(1); }
                32.8%, 100% {
                  opacity: 0;
                  -webkit-transform: scaleX(0);
                          transform: scaleX(0); } }

              /**
               * Applied to elements that cover the checkbox's entire inner container.
               */
              .md-checkbox-frame, .md-checkbox-background, .md-checkbox-checkmark {
                bottom: 0;
                left: 0;
                position: absolute;
                right: 0;
                top: 0; }

              /**
               * Applied to elements that are considered "marks" within the checkbox, e.g. the checkmark and
               * the mixedmark.
               */
              .md-checkbox-checkmark, .md-checkbox-mixedmark {
                width: calc(100% - 4px);
                will-change: opacity, transform; }

              /**
               * Applied to elements that appear to make up the outer box of the checkmark, such as the frame
               * that contains the border and the actual background element that contains the marks.
               */
              .md-checkbox-frame, .md-checkbox-background {
                border-radius: 2px;
                box-sizing: border-box;
                pointer-events: none; }

              .md-checkbox {
                cursor: pointer; }
                .md-checkbox:focus {
                  outline: none; }

              .md-checkbox-layout {
                -webkit-align-items: baseline;
                        align-items: baseline;
                display: -webkit-inline-flex;
                display: inline-flex; }

              .md-checkbox-inner-container {
                display: inline-block;
                height: 18px;
                line-height: 0;
                margin: auto;
                margin-right: 4px;
                -webkit-order: 0;
                        order: 0;
                position: relative;
                vertical-align: middle;
                white-space: nowrap;
                width: 18px; }
                [dir="rtl"] .md-checkbox-inner-container {
                  margin-left: 4px;
                  margin-right: auto; }

              .md-checkbox-frame {
                background-color: transparent;
                border: 2px solid rgba(0, 0, 0, 0.54);
                transition: border-color 140ms cubic-bezier(0, 0, 0.2, 0.1);
                will-change: border-color; }

              .md-checkbox-background {
                -webkit-align-items: center;
                        align-items: center;
                background-color: #2196f3;
                opacity: 0;
                display: -webkit-inline-flex;
                display: inline-flex;
                -webkit-justify-content: center;
                        justify-content: center;
                transition: background-color 140ms cubic-bezier(0, 0, 0.2, 0.1), opacity 140ms cubic-bezier(0, 0, 0.2, 0.1);
                will-change: background-color, opacity; }

              .md-checkbox-checkmark {
                fill: #fafafa;
                width: 100%; }

              .md-checkbox-checkmark-path {
                stroke: #fafafa !important;
                stroke-dashoffset: 22.91026;
                stroke-dasharray: 22.91026;
                stroke-width: 2.4px; }

              .md-checkbox-mixedmark {
                background-color: #fafafa;
                height: 2.4px;
                opacity: 0;
                -webkit-transform: scaleX(0) rotate(0deg);
                        transform: scaleX(0) rotate(0deg); }

              .md-checkbox-align-end .md-checkbox-inner-container {
                -webkit-order: 1;
                        order: 1;
                margin-left: 4px;
                margin-right: auto; }
                [dir="rtl"] .md-checkbox-align-end .md-checkbox-inner-container {
                  margin-left: auto;
                  margin-right: 4px; }

              .md-checkbox-checked .md-checkbox-checkmark {
                opacity: 1; }

              .md-checkbox-checked .md-checkbox-checkmark-path {
                stroke-dashoffset: 0; }

              .md-checkbox-checked .md-checkbox-mixedmark {
                -webkit-transform: scaleX(1) rotate(-45deg);
                        transform: scaleX(1) rotate(-45deg); }

              .md-checkbox-checked .md-checkbox-background {
                opacity: 1; }

              .md-checkbox-indeterminate .md-checkbox-background {
                opacity: 1; }

              .md-checkbox-indeterminate .md-checkbox-checkmark {
                opacity: 0;
                -webkit-transform: rotate(45deg);
                        transform: rotate(45deg); }

              .md-checkbox-indeterminate .md-checkbox-checkmark-path {
                stroke-dashoffset: 0; }

              .md-checkbox-indeterminate .md-checkbox-mixedmark {
                opacity: 1;
                -webkit-transform: scaleX(1) rotate(0deg);
                        transform: scaleX(1) rotate(0deg); }

              .md-checkbox-disabled {
                cursor: default; }
                .md-checkbox-disabled.md-checkbox-checked .md-checkbox-background, .md-checkbox-disabled.md-checkbox-indeterminate .md-checkbox-background {
                  background-color: #b0b0b0; }
                .md-checkbox-disabled:not(.md-checkbox-checked) .md-checkbox-frame {
                  border-color: #b0b0b0; }

              .md-checkbox-anim-unchecked-checked .md-checkbox-background {
                -webkit-animation: 280ms linear 0s md-checkbox-fade-in-background;
                        animation: 280ms linear 0s md-checkbox-fade-in-background; }

              .md-checkbox-anim-unchecked-checked .md-checkbox-checkmark-path {
                -webkit-animation: 280ms linear 0s md-checkbox-unchecked-checked-checkmark-path;
                        animation: 280ms linear 0s md-checkbox-unchecked-checked-checkmark-path; }

              .md-checkbox-anim-unchecked-indeterminate .md-checkbox-background {
                -webkit-animation: 280ms linear 0s md-checkbox-fade-in-background;
                        animation: 280ms linear 0s md-checkbox-fade-in-background; }

              .md-checkbox-anim-unchecked-indeterminate .md-checkbox-mixedmark {
                -webkit-animation: 140ms linear 0s md-checkbox-unchecked-indeterminate-mixedmark;
                        animation: 140ms linear 0s md-checkbox-unchecked-indeterminate-mixedmark; }

              .md-checkbox-anim-checked-unchecked .md-checkbox-background {
                -webkit-animation: 280ms linear 0s md-checkbox-fade-out-background;
                        animation: 280ms linear 0s md-checkbox-fade-out-background; }

              .md-checkbox-anim-checked-unchecked .md-checkbox-checkmark-path {
                -webkit-animation: 140ms linear 0s md-checkbox-checked-unchecked-checkmark-path;
                        animation: 140ms linear 0s md-checkbox-checked-unchecked-checkmark-path; }

              .md-checkbox-anim-checked-indeterminate .md-checkbox-checkmark {
                -webkit-animation: 140ms linear 0s md-checkbox-checked-indeterminate-checkmark;
                        animation: 140ms linear 0s md-checkbox-checked-indeterminate-checkmark; }

              .md-checkbox-anim-checked-indeterminate .md-checkbox-mixedmark {
                -webkit-animation: 140ms linear 0s md-checkbox-checked-indeterminate-mixedmark;
                        animation: 140ms linear 0s md-checkbox-checked-indeterminate-mixedmark; }

              .md-checkbox-anim-indeterminate-checked .md-checkbox-checkmark {
                -webkit-animation: 500ms linear 0s md-checkbox-indeterminate-checked-checkmark;
                        animation: 500ms linear 0s md-checkbox-indeterminate-checked-checkmark; }

              .md-checkbox-anim-indeterminate-checked .md-checkbox-mixedmark {
                -webkit-animation: 500ms linear 0s md-checkbox-indeterminate-checked-mixedmark;
                        animation: 500ms linear 0s md-checkbox-indeterminate-checked-mixedmark; }

              .md-checkbox-anim-indeterminate-unchecked .md-checkbox-background {
                -webkit-animation: 280ms linear 0s md-checkbox-fade-out-background;
                        animation: 280ms linear 0s md-checkbox-fade-out-background; }

              .md-checkbox-anim-indeterminate-unchecked .md-checkbox-mixedmark {
                -webkit-animation: 300ms linear 0s md-checkbox-indeterminate-unchecked-mixedmark;
                        animation: 300ms linear 0s md-checkbox-indeterminate-unchecked-mixedmark; }
            `],
            host: {
                'role': 'checkbox',
                '[id]': 'id',
                '[class.md-checkbox]': 'true',
                '[class.md-checkbox-indeterminate]': 'indeterminate',
                '[class.md-checkbox-checked]': 'checked',
                '[class.md-checkbox-disabled]': 'disabled',
                '[class.md-checkbox-align-end]': 'align == "end"',
                '[tabindex]': 'disabled ? -1 : tabindex',
                '[attr.aria-label]': 'ariaLabel',
                '[attr.aria-labelledby]': 'labelId',
                '[attr.aria-checked]': 'getAriaChecked()',
                '[attr.aria-disabled]': 'disabled',
                '(click)': 'onInteractionEvent($event)',
                '(keyup.space)': 'onInteractionEvent($event)',
                '(blur)': 'onTouched()'
            },
            providers: [MD_CHECKBOX_CONTROL_VALUE_ACCESSOR],
            encapsulation: core_1.ViewEncapsulation.None,
            changeDetection: core_1.ChangeDetectionStrategy.OnPush
        }), 
        __metadata('design:paramtypes', [core_1.Renderer, core_1.ElementRef])
    ], MdCheckbox);
    return MdCheckbox;
})();
exports.MdCheckbox = MdCheckbox;
//# sourceMappingURL=../../../../components/checkbox/checkbox.js.map